{
    "name": "功能实现",
    "type": "global",
    "content": [
    "问题背景：这是一个java项目的仓库，开发人员希望了解项目中某个特定功能是如何实现的，特别是具体的实现步骤和相关代码。",
    "1. 理解功能需求：首先，明确功能的需求和目标。通过查看功能文档、产品需求文档或与产品经理沟通，了解功能的核心需求及其期望效果。需求描述：${function_requirements}",
    "2. 查找功能实现代码：在项目中找到实现该功能的相关代码。可以通过查看功能模块的文件结构、类名或方法名来定位。常见的搜索工具包括IDE的搜索功能、GitHub的搜索、以及项目的代码注释。代码位置：${code}",
    "3. 分析核心实现逻辑：分析代码中实现该功能的核心逻辑。例如，在文件上传功能中，可能涉及文件的接收、存储路径的生成、文件类型的验证等。",
    "4. 识别依赖关系：确定该功能是否依赖其他模块或外部服务。例如，视频预览功能可能需要调用外部服务来获取视频流，或者依赖存储服务来加载视频文件。依赖关系：${dependencies}",
    "5. 查看相关配置文件：检查是否有功能相关的配置项，例如存储路径、外部服务API的URL、权限设置等。这些配置通常在项目的配置文件中定义。配置项：${configurations}",
    "6. 查看测试用例(如有)：查看是否为该功能编写了单元测试或集成测试。通过测试用例来验证功能是否按预期实现。测试用例：${test_cases}",
    "7. 性能分析与优化(如有)：如果功能有性能要求（如视频流播放、文件上传），则需要分析代码的性能瓶颈，并提出优化方案。性能优化：${performance_optimization}",
    "8. 功能文档和开发手册(如有)：检查项目文档或开发手册中的功能说明，通常文档中会提供详细的实现说明和注意事项。文档参考：${documentation}",
    "9. 查看版本控制记录(如有)：通过查看版本控制系统（如Git）的提交记录，了解功能的实现演变过程。版本记录：${version_control}",
    "10. 总结与归纳：将功能的实现步骤进行总结，确保了解所有涉及的模块、流程和关键代码，掌握该功能的实现细节。"
    ],
    "background": "开发人员需要了解项目中某个功能是如何实现的，尤其是步骤和核心逻辑，以便能够复用或修改该功能。",
    "example": {
        "repo": "本地ZFile仓库",
        "query": "ZFile中的登录功能是如何实现的？"
    },
    "steps": [
        {
            "step": "理解功能需求",
            "refs": [
                {
                    "place_holder": "function_description",
                    "query_type": "摘要信息",
                    "query_keys": [
                        "视频文件",
                        "存储源服务",
                        "在线播放"
                    ],
                    "example_ref": "需求描述：ZFile 需要实现在线播放视频文件的功能，允许用户在浏览器中直接播放存储在不同存储源（如本地存储、S3、OneDrive 等）的各种视频格式文件。该功能应支持流畅的播放体验，并处理大文件的分段加载（如使用 HLS 协议的 .m3u8 文件）。"
                }
            ]
        },
        {
            "step": "查找功能实现代码",
            "refs": [
                {
                    "place_holder": "code",
                    "query_type": "相关代码",
                    "query_keys": [
                        "用户认证",
                        "登录验证",
                        "身份验证"
                    ],
                    "example_ref": [
                        "zfile/src/main/java/im/zhaojun/zfile/module/storage/service/impl/GoogleDriveServiceImpl.java 第45行，第 123-125 行",
                        "zfile/src/main/resources/static/assets/OfficeViewer.e85f2f3b.js 第1行， 第 45-50 行",
                        "zfile/src/main/resources/static/assets/common.df582fdd.js 第10行 第 150-155 行"
                    ]
                }
            ]
        },
        {
            "step": "分析核心功能实现逻辑",
            "refs": [
                {
                    "place_holder": "无",
                    "query_type": "无",
                    "query_keys": [
                    ],
                    "example_ref": ""
                }
            ]
        },
        {
            "step": "识别该功能依赖关系",
            "refs": [
                {
                    "place_holder": "dependencies",
                    "query_type": "依赖函数",
                    "query_keys": [
                        "Google Drive API",
                        "配置文件",
                        "数据库",
                        "前端静态资源"
                    ],
                    "example_ref":[
                        "Google Drive API:",
                        "文件：src/main/java/im/zhaojun/zfile/module/storage/service/impl/GoogleDriveServiceImpl.java",
                        "依赖：com.google.api.client.auth.oauth2.Credential 类，用于 OAuth2 认证。",
                        "Spring Security（假设项目使用 Spring Security 进行用户认证和授权）：",
                        "配置文件：src/main/resources/application.properties",
                        "依赖：Spring Security 库，通常在 pom.xml 文件中定义。",
                        "数据库:",
                        "配置文件：src/main/resources/db/migration-mysql/ 和 src/main/resources/db/migration-sqlite/",
                        "依赖：数据库用于存储用户信息和认证信息。",
                        "前端静态资源:",
                        "文件：src/main/resources/static/",
                        "依赖：前端 JavaScript 文件可能依赖于某些前端框架或库来处理认证逻辑。"
                    ]
                    }
            ]
        },
        {
            "step": "查看相关配置文件",
            "refs": [
                {
                    "place_holder": "configurations",
                    "query_type": "配置项",
                    "query_keys": [
                        "安全配置",
                        "数据库连接"
                    ],
                    "example_ref": [
                        "src/main/resources/application-default.properties",
                        "src/main/resources/application.properties",
                        "src/main/resources/logback-spring.xml"
                    ]
                }
            ]
        },
        {
            "step": "查看测试用例",
            "refs": [
                {
                    "place_holder": "test_cases",
                    "query_type": "测试用例文件",
                    "query_keys": [
                        "用户认证",
                        "登录验证",
                        "身份验证"
                    ],
                    "example_ref": "未找到测试用例文件"
                }
            ]
        },
        {
            "step": "性能分析与优化",
            "refs": [
                {
                    "place_holder": "performance_optimization",
                    "query_type": "性能优化方法",
                    "query_keys": [
                        "用户认证",
                        "登录验证",
                        "身份验证"
                    ],
                    "example_ref": [
                        "数据库性能优化:src/main/resources/db/migration-mysql/ ,src/main/resources/db/migration-sqlite/"
                    ]
                }
            ]
        },
        {
            "step": "功能文档和开发手册",
            "refs": [
                {
                    "place_holder": "documentation",
                    "query_type": "文件或注释",
                    "query_keys": [
                        "用户认证",
                        "登录验证",
                        "身份验证"
                    ],
                    "example_ref":[ "readme.md",
                        "LinkDownloadService.java注释部分",
                        "CorsFilter.java 注释部分"
                    ]
                }
            ]
        },
        {
            "step": "查看版本控制记录",
            "refs": [
                {
                    "place_holder": "version_control",
                    "query_type": "版本记录",
                    "query_keys": [
            
                    ],
                    "example_ref": "git log src/main/java/im/zhaojun/zfile/module/storage/service/impl/GoogleDriveServiceImpl.java"
                }
            ]
        },
        {
            "step": "总结与归纳",
            "refs": [
                {
                    "place_holder": "无",
                    "query_type": "无",
                    "query_keys": [
                    ],
                    "example_ref": ""
                }
            ]
        }
    ],
    "example_answer": [
        "后端实现：",
        "控制器：处理用户登录请求的控制器类可能位于 src/main/java/im/zhaojun/ 目录下。例如，LoginController.java。",
        "服务层：处理业务逻辑的服务类可能位于 src/main/java/im/zhaojun/service/ 目录下。例如，UserService.java。",
        "数据访问层：与数据库交互的 Mapper 类和 XML 配置文件可能位于 src/main/java/im/zhaojun/mapper/ 和 src/main/resources/mapper/ 目录下。例如，UserMapper.java 和 UserMapper.xml。",
        "配置文件：",
        "Spring Security 配置：如果使用 Spring Security 进行用户认证和授权，相关配置可能在 src/main/resources/application.properties 和 src/main/resources/application-default.properties 文件中。",
        "日志配置：src/main/resources/logback-spring.xml 文件用于配置日志记录，可能包含与登录相关的日志记录配置。",
        "数据库：",
        "数据库迁移文件：src/main/resources/db/migration-mysql/ 和 src/main/resources/db/migration-sqlite/ 目录下的文件可能包含创建用户表和存储用户信息的 SQL 脚本。",
        "前端实现：",
        "静态资源：src/main/resources/static/ 目录下的静态资源文件可能包含登录页面的 HTML、CSS 和 JavaScript 文件。",
        "模板文件：src/main/resources/templates/ 目录下的模板文件可能包含登录页面的模板文件。",
        "通过控制器类：/ src/main/java/im/zhaojun/controller/LoginController.java，服务类：// src/main/java/im/zhaojun/service/UserService.java，数据访问层：// src/main/java/im/zhaojun/mapper/UserMapper.java。数据库迁移文件： src/main/resources/db/migration-mysql/V1__Create_users_table.sql以上各个部分的协作，实现了用户登录功能。"                       
    ]
}
