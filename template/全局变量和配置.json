
{
    "name": "全局变量和配置",
    "type": "配置分析",
    "content": [
        "问题背景：开发人员希望了解项目中全局变量和配置参数的定义及使用情况，包括它们的作用、来源、管理方式等信息。",
        "1. 识别配置文件：确定项目中使用的配置文件（如`application.properties`、`application.yml`、`config.xml`等）。配置文件列表：${config_files}",
        "2. 识别全局变量：查找项目中定义的全局变量，包括常量类中的静态变量、配置类中的变量等。全局变量列表：${global_variables}",
        "3. 分析配置参数：详细分析每个配置参数的作用、默认值及其来源（如环境变量、命令行参数等）。配置参数详情：${config_parameters}",
        "4. 配置管理方式：了解项目如何管理和加载配置参数，例如使用Spring的`@Value`注解、配置管理工具（如Spring Cloud Config）等。管理方式：${config_management}",
        "5. 使用情况分析：分析配置参数和全局变量在项目中的具体使用情况，包括在哪些模块或类中被引用。使用情况：${usage_analysis}",
        "6. 总结与建议：总结全局变量和配置管理的现状，提出优化建议和潜在问题。"
    ],
    "background": "开发人员需要了解项目中全局变量和配置参数的定义及使用情况，以便进行维护、优化和扩展。",
    "keywords": ["全局变量", "配置参数", "配置文件", "配置管理", "Spring"],
    "example": {
        "repo": "本地ZFile仓库",
        "query_variants": [
            "ZFile中全局配置参数是如何定义和使用的？",
            "项目中的配置文件和全局变量怎么管理？",
            "有哪些全局变量和配置参数被定义和使用？"
        ]
    },
    "steps": [
        {
            "step": "识别配置文件",
            "reason": "配置文件通常是项目参数化配置的入口，识别配置文件是分析全局变量和参数的第一步。",
            "refs": [
                {
                    "place_holder": "config_files",
                    "query": "请查找项目中使用的配置文件，例如`application.properties`、`application.yml`等。",
                    "example_ref": [
                        "src\main\resources\application-default.properties",
                        "src\main\resources\application.properties",
                        "src\main\resources\logback-spring.xml"
                    ]
                }
            ]
        },
        {
            "step": "识别全局变量",
            "reason": "全局变量是项目中多个模块共享的重要参数，理解它们的定义和作用有助于优化配置管理。",
            "refs": [
                {
                    "place_holder": "global_variables",
                    "query": "请查找项目中定义的全局变量，例如常量类中的静态变量或配置类中的变量。",
                    "example_ref": [
                        "src\main\java\im\zhaojun\zfile\module\config\mapper\SystemConfigMapper.java",
                        "src\main\java\im\zhaojun\zfile\module\config\constant\SystemConfigConstant.java",
                        "src/main/java/im/zhaojun/zfile/core/config/ZFileProperties.java",
                        "src/main/java/im/zhaojun/zfile/core/constant/ZFileConstant.java",
                        "src\main\java\im\zhaojun\zfile\core\constant\MdcConstant.java"

                        ]
                }
            ]
        },
        {
            "step": "分析配置参数",
            "reason": "详细分析配置参数的作用和来源，可以帮助开发人员理解配置的用途和适用场景。",
            "refs": [
                {
                    "place_holder": "config_parameters",
                    "query": "查找项目中的配置参数，主要包括系统配置参数、数据库配置、安全配置参数、环境相关配置和外部服务配置",
                    "example_ref": [
                        "src\main\resources\application.properties",
                        "src/main/java/im/zhaojun/zfile/core/config/ZFileProperties.java",
                        "src/main/java/im/zhaojun/zfile/core/constant/SystemConfigConstant.java",
                        "src\main\java\im\zhaojun\zfile\module\config\model\request\UpdateViewSettingRequest.java",
                        "src\main\java\im\zhaojun\zfile\module\config\model\result\SiteConfigResult.java",
                        "src\main\java\im\zhaojun\zfile\module\storage\annotation\StorageParamItem.java",
                        "src\main\java\im\zhaojun\zfile\module\storage\model\param\FtpParam.java",
                        "src\main\java\im\zhaojun\zfile\module\storage\model\param\S3BaseParam.java",
                    ]
                }
            ]
        },
        {
            "step": "配置管理方式",
            "reason": "了解项目中使用的配置管理方式可以帮助评估配置加载的效率和灵活性。",
            "refs": [
                {
                    "place_holder": "config_management",
                    "query": "请查找项目中使用的配置管理方式，例如使用`@Value`注解、配置管理工具（如Spring Cloud Config）等。",
                    "example_ref": [
                        "src/main/java/im/zhaojun/zfile/core/config/SpringCacheConfig.java: 18-28",
                        "src/main/java/im/zhaojun/zfile/core/config/ZFileProperties.java：11-14"
                    ]
                }
            ]
        },
        {
            "step": "使用情况分析",
            "reason": "分析配置参数和全局变量的使用情况，可以发现潜在的冗余或未使用的配置，帮助优化代码结构。",
            "refs": [
                {
                    "place_holder": "usage_analysis",
                    "query": "请分析配置参数和全局变量在项目中的使用情况，确认它们在哪些模块或类中被引用。",
                    "example_ref": [
                        "SystemConfigService.java: 50-70",
                        "SiteController.java: 40-60",
                        "src\\main\\java\im\zhaojun\zfile\module\config\model\result\SiteConfigResult.java:13-14",
                        "src\\main\\java\im\zhaojun\zfile\module\config\controller\SettingController.java: 32-53"
                    ]
                }
            ]
        },
        {
            "step": "总结与建议",
            "reason": "通过总结分析结果，帮助开发人员全面了解全局变量和配置的现状，并提出改进建议。",
            "refs": []
        }
    ],
    "example_answer":[
        "在 ZFile 项目中，全局变量和配置主要通过以下几种方式定义和使用：",
        "### 1. 配置文件",
        "#### `application.properties`",
        "位于 application.properties 文件中，包含了 Spring Boot 应用的全局配置。",
        "#### `application-default.properties`",
        "位于 application-default.properties 文件中，包含了默认的应用配置。",
        "### 2. 配置类",
        "#### ZFileProperties",
        "位于 ZFileProperties.java 文件中，定义了 ZFile 的自定义配置属性。",
        "```java",
        "package im.zhaojun.zfile.core.config;",
        "import lombok.Data;",
        "import org.springframework.boot.context.properties.ConfigurationProperties;",
        "import org.springframework.boot.context.properties.EnableConfigurationProperties;",
        "import org.springframework.stereotype.Component;",
        "/**",
        " * ZFile 自定义配置属性",
        " * ",
        " * @author zhaojun",
        " */",
        "@Data",
        "@EnableConfigurationProperties",
        "@Component",
        "@ConfigurationProperties(prefix = \"zfile\")",
        "public class ZFileProperties {",
        "    private boolean debug;",
        "}",
        "```",
        "### 3. 配置服务",
        "#### SystemConfigService",
        "位于 SystemConfigService.java 文件中，提供了系统配置的获取和更新服务。",
        "```java",
        "package im.zhaojun.zfile.module.config.service;",
        "import cn.hutool.core.collection.CollUtil;",
        "import cn.hutool.core.convert.Convert;",
        "import cn.hutool.core.convert.ConvertException;",
        "import cn.hutool.core.util.EnumUtil;",
        "import cn.hutool.core.util.ObjUtil;",
        "import cn.hutool.core.util.StrUtil;",
        "import im.zhaojun.zfile.core.config.ZFileProperties;",
        "import im.zhaojun.zfile.core.exception.ServiceException;",
        "import im.zhaojun.zfile.core.util.CodeMsg;",
        "import im.zhaojun.zfile.core.util.EnumConvertUtils;",
        "import im.zhaojun.zfile.module.config.constant.SystemConfigConstant;",
        "import im.zhaojun.zfile.module.config.event.ISystemConfigModifyHandler;",
        "import im.zhaojun.zfile.module.config.mapper.SystemConfigMapper;",
        "import im.zhaojun.zfile.module.config.model.dto.SystemConfigDTO;",
        "import im.zhaojun.zfile.module.config.model.entity.SystemConfig;",
        "import lombok.extern.slf4j.Slf4j;",
        "import org.springframework.cache.annotation.CacheConfig;",
        "import org.springframework.cache.annotation.CacheEvict;",
        "import org.springframework.cache.annotation.Cacheable;",
        "import org.springframework.stereotype.Service;",
        "import org.springframework.transaction.annotation.Transactional;",
        "import javax.annotation.Resource;",
        "import java.lang.reflect.Field;",
        "import java.util.ArrayList;",
        "import java.util.List;",
        "import java.util.Map;",
        "/**",
        " * 系统设置 Service",
        " * ",
        " * 提供系统配置的获取和更新服务",
        " * ",
        " */",
        "@Slf4j",
        "@Service",
        "@CacheConfig(cacheNames = \"systemConfig\")",
        "public class SystemConfigService {",
        "    @Resource",
        "    private SystemConfigMapper systemConfigMapper;",
        "    @Resource",
        "    private ZFileProperties zFileProperties;",
        "    @Resource",
        "    private ISystemConfigModifyHandler systemConfigModifyHandler;",
        "    private final Class<SystemConfigDTO> systemConfigClazz = SystemConfigDTO.class;",
        "    @Cacheable(key = \"'dto'\")",
        "    public SystemConfigDTO getSystemConfig() {",
        "        SystemConfigDTO systemConfigDTO = new SystemConfigDTO();",
        "        List<SystemConfig> systemConfigList = systemConfigMapper.findAll();",
        "        for (SystemConfig systemConfig : systemConfigList) {",
        "            String key = systemConfig.getName();",
        "            try {",
        "                Field field = systemConfigClazz.getDeclaredField(key);",
        "                field.setAccessible(true);",
        "                String strVal = systemConfig.getValue();",
        "                Class<?> fieldType = field.getType();",
        "                Object convertVal;",
        "                if (EnumUtil.isEnum(fieldType)) {",
        "                    convertVal = EnumConvertUtils.convertStrToEnum(fieldType, strVal);",
        "                } else {",
        "                    convertVal = Convert.convert(fieldType, strVal);",
        "                }",
        "                field.set(systemConfigDTO, convertVal);",
        "            } catch (NoSuchFieldException | IllegalAccessException | ConvertException e) {",
        "                log.error(\"通过反射, 将字段 {} 注入 SystemConfigDTO 时出现异常:\", key, e);",
        "            }",
        "        }",
        "        return systemConfigDTO;",
        "    }",
        "    @Transactional(rollbackFor = Exception.class)",
        "    @CacheEvict(allEntries = true)",
        "    public void updateSystemConfig(SystemConfigDTO systemConfigDTO) {",
        "        List<SystemConfig> systemConfigListInDb = systemConfigMapper.findAll();",
        "        Map<String, SystemConfig> systemConfigMapInDb = CollUtil.toMap(systemConfigListInDb, null, SystemConfig::getName);",
        "        List<SystemConfig> updateSystemConfigList = new ArrayList<>();",
        "        Field[] fields = systemConfigClazz.getDeclaredFields();",
        "        for (Field field : fields) {",
        "            String key = field.getName();",
        "            SystemConfig systemConfig = systemConfigMapInDb.get(key);",
        "            if (systemConfig != null) {",
        "                field.setAccessible(true);",
        "                Object val = null;",
        "                try {",
        "                    val = field.get(systemConfigDTO);",
        "                } catch (IllegalAccessException e) {",
        "                    log.error(\"通过反射, 从 SystemConfigDTO 获取字段 {} 时出现异常:\", key, e);",
        "                }",
        "                if (val != null) {",
        "                    if (EnumUtil.isEnum(val)) {",
        "                        val = EnumConvertUtils.convertEnumToStr(val);",
        "                    }",
        "                    String originVal = systemConfig.getValue();",
        "                    if (ObjUtil.equals(originVal, val)) {",
        "                        continue;",
        "                    }",
        "                    SystemConfig updateSystemConfig = new SystemConfig();",
        "                    updateSystemConfig.setId(systemConfig.getId());",
        "                    updateSystemConfig.setName(systemConfig.getName());",
        "                    updateSystemConfig.setValue(Convert.toStr(val));",
        "                    updateSystemConfig.setTitle(systemConfig.getTitle());",
        "                    updateSystemConfigList.add(updateSystemConfig);",
        "                }",
        "            }",
        "        }",
        "        updateSystemConfigList.forEach(systemConfigInForm -> {",
        "            SystemConfig systemConfigInDb = systemConfigMapInDb.get(systemConfigInForm.getName());",
        "            systemConfigModifyHandler.modify(systemConfigInDb, systemConfigInForm);",
        "            systemConfigMapper.updateById(systemConfigInForm);",
        "        });",
        "    }",
        "}",
        "```",
        "### 4. 配置常量",
        "#### SystemConfigConstant",
        "位于 SystemConfigConstant.java 文件中，定义了系统配置的常量。",
        "```java",
        "package im.zhaojun.zfile.module.config.constant;",
        "/**",
        " * 系统配置常量",
        " * ",
        " * 定义了系统配置的常量",
        " * ",
        " */",
        "public class SystemConfigConstant {",
        "    public static final String USERNAME = \"username\";",
        "    public static final String PASSWORD = \"password\";",
        "    public static final String LOGIN_VERIFY_MODE = \"loginVerifyMode\";",
        "}",
        "```",
        "### 5. 配置使用情况",
        "#### 在控制器中使用配置",
        "例如，在 SiteController.java 文件中，使用 SystemConfigService 获取系统配置。",
        "```java",
        "package im.zhaojun.zfile.module.config.controller;",
        "import im.zhaojun.zfile.core.config.ZFileProperties;",
        "import im.zhaojun.zfile.core.util.AjaxJson;",
        "import im.zhaojun.zfile.module.config.model.dto.SystemConfigDTO;",
        "import im.zhaojun.zfile.module.config.model.result.SiteConfigResult;",
        "import im.zhaojun.zfile.module.config.service.SystemConfigService;",
        "import im.zhaojun.zfile.module.storage.service.StorageSourceService;",
        "import io.swagger.annotations.Api;",
        "import io.swagger.annotations.ApiOperation;",
        "import lombok.extern.slf4j.Slf4j;",
        "import org.springframework.beans.BeanUtils;",
        "import org.springframework.web.bind.annotation.GetMapping;",
        "import org.springframework.web.bind.annotation.RequestMapping;",
        "import org.springframework.web.bind.annotation.RestController;",
        "import javax.annotation.Resource;",
        "/**",
        " * 站点基础模块接口",
        " * ",
        " * 提供站点基础配置的获取接口",
        " * ",
        " */"]
    }