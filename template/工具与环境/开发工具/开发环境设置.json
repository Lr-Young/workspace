[
    {
      "templateName": "开发环境设置",
      "applicableCategory": "工具与环境 > 开发工具",
      "intenType":"Global",
      "keywords": ["开发环境设置", "IDE配置", "依赖安装", "项目配置"],
      "templateContent": [
        "问题背景：新加入的开发人员需要设置该JAVA项目的开发环境，关注IDE配置、依赖安装、项目配置等方面。",
        "1. 确认所需的开发工具和版本（如JDK、IDE、构建工具）：${required_tools}",
        "2. 确认是否已经下载并安装必要的软件和插件（如IntelliJ IDEA插件，若该部分缺失，提醒用户）：${installation_steps}",
        "3. 查看项目仓库是否被正确克隆，查看本地环境变量配置信息,若无，给出指导：${repository_cloning}",
        "4. 检查项目依赖配置，确保所有依赖正确解析和下载：${dependency_setup}",
        "5. 检查导入项目到IDE的配置是否完成，并进行初步的项目配置（如运行配置、调试配置等）：${project_import}",
        "6. 为了验证开发环境是否配置成功，给出简单的测试或示例代码",
        "7. 总结：根据以上步骤，生成一个详细的开发环境设置指南，确保新开发人员能够顺利开始项目开发。",
        "注意：需要输出最后的总结，中间分析步骤若缺失相应占位信息，提醒用户完成"
      ],
      "exampleQuestions": [
        "如何为`zfile`项目设置开发环境？",
        "新加入`zfile`项目的开发者需要如何配置IDE和依赖？",
        "请指导我完成`zfile`项目的本地开发环境搭建。"
      ],
      "placeholdersDescription": {
        "required_tools": "列出项目所需的开发工具及其推荐版本，如JDK版本、IDE类型及版本等。",
        "installation_steps": "详细的安装步骤，包括软件下载链接、安装过程中的注意事项等。",
        "repository_cloning": "克隆项目仓库的命令和步骤，如Git克隆命令、分支选择等。",
        "dependency_setup": "项目依赖信息，可能包括Maven或Gradle的依赖解析。",
        "project_import": "项目配置信息。"
      },
      "ref": [
        "WebMvcConfig.java",
        "InstallController.java",
        "SettingController.java",
        "siteController.java",
        "Readme.md",
        "pom.xml",
        "application.properties"
      ],
      "final_answer": [
        "欢迎加入 ZFile 项目！以下是设置开发环境的步骤，包括 IDE 配置、依赖安装和项目配置等方面：",
        "",
        "### 1. IDE 配置",
        "建议使用 IntelliJ IDEA 或 Visual Studio Code 作为开发工具。",
        "",
        "#### IntelliJ IDEA",
        "1. **导入项目**：",
        "   - 打开 IntelliJ IDEA，选择 `File -> Open`，然后选择项目根目录。",
        "2. **安装插件**：",
        "   - 确保安装了以下插件：",
        "     - Lombok",
        "     - Spring Boot",
        "     - Maven",
        "3. **配置 Lombok**：",
        "   - 确保启用了 `Annotation Processors`：`File -> Settings -> Build, Execution, Deployment -> Compiler -> Annotation Processors`，勾选 `Enable annotation processing`。",
        "",
        "#### Visual Studio Code",
        "1. **安装插件**：",
        "   - 打开 VS Code，进入扩展市场，安装以下插件：",
        "     - Java Extension Pack",
        "     - Spring Boot Extension Pack",
        "     - Lombok Annotations Support for VS Code",
        "2. **配置 Lombok**：",
        "   - 在项目根目录下的 `settings.json` 文件中添加以下配置：",
        "     ```json",
        "     {",
        "       \"java.configuration.runtimes\": [",
        "         {",
        "           \"name\": \"JavaSE-11\",",
        "           \"path\": \"/path/to/your/jdk-11\"",
        "         }",
        "       ],",
        "       \"java.jdt.ls.vmargs\": \"-javaagent:lombok.jar\"",
        "     }",
        "     ```",
        "",
        "### 2. 依赖安装",
        "项目使用 Maven 作为构建工具，确保已安装 Maven 和 JDK 11 或更高版本。",
        "",
        "1. **安装 Maven 依赖**：",
        "   - 在项目根目录下运行以下命令：",
        "     ```sh",
        "     mvn clean install",
        "     ```",
        "",
        "### 3. 项目配置",
        "项目配置主要包括数据库配置和应用配置。",
        "",
        "#### 数据库配置",
        "1. **配置数据库连接**：",
        "   - 在 `application.properties` 文件中配置数据库连接信息：",
        "     ```properties",
        "     spring.datasource.url=jdbc:mysql://localhost:3306/zfile?useUnicode=true&characterEncoding=utf-8&useSSL=false",
        "     spring.datasource.username=root",
        "     spring.datasource.password=yourpassword",
        "     ```",
        "",
        "#### 应用配置",
        "1. **配置应用属性**：",
        "   - 在 `application.properties` 文件中配置其他应用属性，如端口号、日志级别等：",
        "     ```properties",
        "     server.port=8080",
        "     logging.level.root=INFO",
        "     ```",
        "",
        "### 4. 运行项目",
        "1. **运行 Spring Boot 应用**：",
        "   - 在 IDE 中找到主类 `im.zhaojun.zfile.ZFileApplication`，右键选择 `Run` 或者在命令行中运行：",
        "     ```sh",
        "     mvn spring-boot:run",
        "     ```",
        "",
        "### 5. 其他配置",
        "1. **Swagger 文档**：",
        "   - 项目集成了 Swagger，可以通过访问 `http://localhost:8080/swagger-ui.html` 查看 API 文档。",
        "2. **代码格式化**：",
        "   - 使用项目中的 `.editorconfig` 文件进行代码格式化，确保代码风格一致。",
        "",
        "希望这些步骤能帮助你快速上手项目开发。如果有任何问题，请随时联系团队成员。祝你开发顺利！"
    ]
    }
  ]
  