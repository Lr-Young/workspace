{
    "name": "项目结构和组织",
    "type": "global",
    "content": [
        "问题背景：这是一个Java项目的代码仓库，开发人员询问项目代码仓库的整体架构，主要关注其目录结构、模块职责、依赖关系方面。",
        "1. 分析项目的目录结构，项目代码的目录结构如下：${directory_structure}",
        "2. 分析项目的主要模块及其作用，核心模块包括：${modules}",
        "3. 识别项目的依赖，项目的依赖包括：${dependencies}",
        "4. 阅读项目相关资料（如README、设计文档、API文档等）：${documents}",
        "5. 总结：根据以上分析步骤，生成关于这个代码仓库的详细架构分析报告。",
        "注意：只需要输出最后的总结，中间分析步骤不需要输出"
    ],
    "background": "问题背景：这是一个Java项目的代码仓库，开发人员询问项目代码仓库的整体架构，主要关注其目录结构、模块职责、依赖关系方面。",
    "example": {
        "repo": "本地ZFile仓库",
        "query": "这个项目的整体架构是什么样的？"
    },
    "steps": [
        {
            "step": "分析项目的目录结构，项目代码的目录结构如下：${directory_structure}",
            "refs": [
                {
                    "place_holder": "directory_structure",
                    "query": "请查找并提供项目的目录结构。",
                    "example_ref": [
                        "zfile/",
                        "├── .github/",
                        "│   ├── ISSUE_TEMPLATE/",
                        "│   │   └── config.yml",
                        "├── .gitignore",
                        "├── LICENSE",
                        "├── pom.xml",
                        "├── README.md",
                        "├── src/",
                        "│   ├── main/",
                        "│   │   ├── java/",
                        "│   │   │   ├── com/",
                        "│   │   │   │   └── baomidou/",
                        "│   │   │   ├── im/",
                        "│   │   │   │   └── zhaojun/",
                        "│   │   │   └── springfox/",
                        "│   │   │       └── documentation/",
                        "│   │   ├── resources/",
                        "│   │   │   ├── application-default.properties",
                        "│   │   │   ├── application.properties",
                        "│   │   │   ├── banner.txt",
                        "│   │   │   ├── db/",
                        "│   │   │   │   ├── migration-mysql/",
                        "│   │   │   │   └── migration-sqlite/",
                        "│   │   │   ├── logback-spring.xml",
                        "│   │   │   ├── mapper/",
                        "│   │   │   │   └── DownloadLogMapper.xml",
                        "│   │   │   ├── META-INF/",
                        "│   │   │   ├── static/",
                        "│   │   │   └── templates/",
                        "├── target/",
                        "└── template.json"
                    ]
                }
            ]
        },
        {
            "step": "分析项目的主要模块及其作用，核心模块包括：${modules}",
            "refs": [
                {
                    "place_holder": "modules",
                    "query": "请查找并提供项目的核心模块及其功能。ps:这里有点疑问，是否在代码地图做好之后，可以直接找到相应的总结信息，而不是分散的代码文件",
                    "example_ref": [
                        "核心模块：", 
                        "包含项目的主要业务逻辑和配置文件。", 
                        "目录：src/main/java/im/zhaojun/", 
                        "配置模块：", 
                        "包含项目的配置文件和资源文件。", 
                        "目录：src/main/resources/", 
                        "application-default.properties", 
                        "application.properties", 
                        "logback-spring.xml", 
                        "banner.txt", 
                        "数据库模块：", 
                        "包含数据库迁移脚本和相关的 MyBatis 映射文件。", 
                        "目录：src/main/resources/db/", 
                        "migration-mysql/", 
                        "migration-sqlite/", 
                        "mapper/", 
                        "静态资源模块：", 
                        "包含静态资源文件和模板文件。", 
                        "目录：src/main/resources/static/", 
                        "templates/", 
                        "依赖模块：", 
                        "包含项目的依赖管理文件。", 
                        "文件：pom.xml", 
                        "文档模块：", 
                        "包含项目的文档和说明文件。", 
                        "文件：README.md", 
                        "目录：.github/", 
                        "ISSUE_TEMPLATE/", 
                        "构建输出模块：", 
                        "包含项目的构建输出文件。", 
                        "目录：target/"

                    ]
                }
            ]
        },
        {
            "step": "识别项目的依赖，项目的依赖包括：${dependencies}",
            "refs": [
                {
                    "place_holder": "dependencies",
                    "query": "请查找并提供项目的外部依赖库。",
                    "example_ref": [
                        "pom.xml: 28-258"
                    ]
                }
            ]
        },
        {
            "step": "阅读项目相关资料（如README、设计文档、API文档等）：${documents}",
            "refs": [
                {
                    "place_holder": "documents",
                    "query": "请查找并提供项目的README文档。",
                    "example_ref": "README.md:16-21"
                }
            ]
        },
        {
            "step": "总结：根据以上分析步骤，生成关于这个代码仓库的详细架构分析报告",
            "refs": []
        }
    ],
    "example_answer":[
        "这个项目的整体架构主要由以下几个模块组成：",
        "",
        "存储服务模块 (storage):",
        "",
        "主要负责与不同存储源（如本地存储、微软云盘等）的交互。",
        "例如，AbstractMicrosoftDriveService 是一个抽象类，定义了与微软云盘交互的基本方法。",
        "StorageSourceService 提供了存储源的管理和操作服务。",
        "",
        "短链接模块 (link):",
        "",
        "负责生成和解析短链接。",
        "例如，ShortLinkController 提供了生成短链接和根据短链接跳转的接口。",
        "",
        "系统配置模块 (config):",
        "",
        "负责系统配置的管理。",
        "例如，SystemConfigService 提供了获取和更新系统配置的服务。",
        "",
        "文件控制器模块 (file):",
        "",
        "负责文件的管理和操作。",
        "例如，FileController 提供了文件列表、文件详情等接口。",
        "",
        "实现类模块 (impl):",
        "",
        "具体实现了不同存储源的服务。",
        "例如，LocalServiceImpl 实现了本地存储的服务。",
        "",
        "这些模块通过控制器、服务和数据访问层相互协作，共同实现了文件存储、短链接生成、系统配置管理等功能。"
    ]
}
