{
    "name": "局部变量与数据流",
    "type": "local",
    "content": [
        "1. 查找该局部变量或数据的出现位置，变量名称为：${var_name}",
        "2. 分析该局部变量或数据的使用场景，包括使用次数和上下文. ${context}",
        "3. 总结：根据以上分析步骤，生成关于该局部变量的详细报告，包括其定义和使用情况"
    ],
    "background": "问题背景：在Java项目的代码分析过程中，开发人员希望深入了解局部变量的变化及数据流动。关注重点在于局部变量如何在代码中修改或处理，数据如何通过不同的代码段传递。",
    "example": {
        "repo": "本地ZFile仓库",
        "query": "变量enumClassType的值在MybatisEnumTypeHandler.java中是如何变化的？"
    },
    "steps": [
        {
            "step": "1. 查找该局部变量或数据的出现位置. ${var_use}",
            "refs": [
                {
                    "place_holder": "var_use",
                    "request": "变量enumClassType的出现位置",
                    "example_ref": "MybatisEnumTypeHandler.java: 53\n\nMybatisEnumTypeHandler.java: 57\n\nMybatisEnumTypeHandler.java: 58\n\nMybatisEnumTypeHandler.java: 61\n\nMybatisEnumTypeHandler.java: 62\n\nMybatisEnumTypeHandler.java: 64\n\nMybatisEnumTypeHandler.java: 65\n\n"
                }
            ],
            "reasonality":"明确变量在代码文件中的定义和出现位置是后续分析的基础。只有找到变量的具体位置，才能分析其作用范围和行为。",
            "dependency":"无"
        },
        {
            "step": "2. 分析该局部变量或数据的使用场景，包括使用次数和上下文. ",
            "refs": [],
            "reasonality":"明确变量在不同代码片段中的具体用途，尤其是与函数调用、条件判断或循环体等逻辑的关联。",
            "dependency": "{var_use}"
        },
        {
            "step": "3. 总结：根据以上分析步骤，生成关于该局部变量的详细报告，包括其定义和使用情况",
            "refs": [],
            "dependency":[
                "${var_use}"
            ]
        }
  
    ],
    "example_answer": [
        "在 MybatisEnumTypeHandler.java 文件中，变量 enumClassType 的值在构造函数中被初始化，并在整个类的生命周期中保持不变。以下是 enumClassType 值的变化过程：",
        "构造函数初始化in line57",
        "空值检查 in line58: 在构造函数中, 首先检查传入的 enumClassType 是否为 null，如果是 null，则抛出 IllegalArgumentException 异常",
        "赋值给实例变量 in line 61: 将传入的 enumClassType 赋值给类的实例变量 this.enumClassType。",
        "创建 MetaClass 实例 in line 62: 使用 enumClassType 创建一个 MetaClass 实例，用于反射操作。",
        "类型检查 in line 64: 检查 enumClassType 是否实现了 IEnum 接口，如果没有实现，则查找枚举值字段名，如果找不到则抛出异常。"
    ]
}